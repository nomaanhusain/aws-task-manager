    //TaskList.tsx
    // <div>
    //   <h2>Your Tasks</h2>
    //   {tasks.length === 0 ? (
    //     <p>No tasks yet.</p>
    //   ) : (
    //     <ul>
    //       {tasks.map((task) => (
    //         <li key={task.id}>
    //           <strong>{task.title}</strong> â€” {task.completion_status}
    //         </li>
    //       ))}
    //     </ul>
    //   )}
    // </div>a




    //TaskListForm return
      return (
    <form onSubmit={handleSubmit}>

    <Field.Root required>
      <Field.Label>
        Task Title
        <Field.RequiredIndicator />
      </Field.Label>
      <Input placeholder="Some Awesome Task" 
        value={title}
        onChange={(e) => setTitle(e.target.value)}/>
    </Field.Root>


    <Box>
      <Text fontWeight="bold" mb={2}>Assign to:</Text>
      <CheckboxGroup value={assignedTo}>
        <Stack>
          {users.map((user) => (
            <Checkbox.Root
              key={user.user_id}
              value={user.user_id}
              checked={assignedTo.includes(user.user_id)}
              onCheckedChange={() => handleToggleAssign(user.user_id)}
            >
              <Checkbox.HiddenInput />
              <Checkbox.Control />
              <Checkbox.Label>{user.username}</Checkbox.Label>
            </Checkbox.Root>
          ))}
        </Stack>
      </CheckboxGroup>
    </Box>

    <Button
      type="submit"
      mt={4}
      colorScheme="blue"
    >
      Create Task
    </Button>
    </form>
  );



  Chakra UI Checkbox from TaskListForm:
        <Box mt={6}>
        <Text 
          fontWeight="medium" 
          fontSize="sm"
          mb={3}
        >
          Assign to:
        </Text>
        <CheckboxGroup value={assignedTo}>
          <Stack>
            {users.map((user) => (
              <Checkbox.Root
                key={user.user_id}
                value={user.user_id}
                checked={assignedTo.includes(user.user_id)}
                onCheckedChange={() => handleToggleAssign(user.user_id)}
              >
                <Checkbox.Control 
                  colorScheme="blue" 
                  borderRadius="md" 
                  borderColor="gray.300"
                />
                <Checkbox.Label 
                  ml={2} 
                  fontSize="sm"
                  _checked={{ color: "blue.600", fontWeight: "medium" }}
                >
                  {user.username}
                </Checkbox.Label>
                <Checkbox.HiddenInput />
              </Checkbox.Root>
            ))}
          </Stack>
        </CheckboxGroup>
      </Box>

AssignUserComboBox.tsx

  
import {
    Badge,
    Combobox,
    Box,
    Text,
    Portal,
    Wrap,
    createListCollection,
  } from "@chakra-ui/react";
  import { useMemo, useState } from "react";
  
  type User = {
    user_id: string;
    username: string;
  };
  
  type Props = {
    users: User[];
    assignedTo: string[];
    setAssignedTo: (ids: string[]) => void;
  };
  
  export default function AssignUserCombobox({ users, assignedTo, setAssignedTo }: Props) {
    const [searchValue, setSearchValue] = useState("");
    console.log("Users in combobox:", users);
  
    const filteredUsers = useMemo(
      () =>
        users.filter((user) =>
          user.username.toLowerCase().includes(searchValue.toLowerCase())
        ),
      [users, searchValue]
    );
  
    const collection = useMemo(
      () =>
        createListCollection({
          items: filteredUsers.map((u) => ({ id: u.user_id, value: u.username })),
        }),
      [filteredUsers]
    );
  
    const handleValueChange = (details: Combobox.ValueChangeDetails) => {
      console.log("Value changed:", details);
      setAssignedTo(details.value); // this will be an array of user_id strings
    };

    // console.log("Search value:", searchValue);
    // console.log("Filtered users:", filteredUsers);
    // console.log("Items in collection:", collection.items)
    // console.log("Collection:", collection);

  
    return (
      <Box mt={6}>
        <Text 
          fontWeight="medium" 
          fontSize="sm"
          mb={3}>
            Assign to
        </Text>

        
  
        <Combobox.Root
          collection={collection}
          multiple
          closeOnSelect={false}
          value={assignedTo}
          onValueChange={handleValueChange}
          onInputValueChange={(details) => setSearchValue(details.inputValue)}
          width="full"
        >
          <Wrap gap="2" mb={2}>
            {assignedTo.map((id) => {
              const user = users.find((u) => u.user_id === id);
              return user ? <Badge key={id}>{user.username}</Badge> : null;
            })}
          </Wrap>
  
          <Combobox.Control>
            <Combobox.Input placeholder="Search users..." />
            <Combobox.IndicatorGroup>
              <Combobox.Trigger />
            </Combobox.IndicatorGroup>
          </Combobox.Control>
  
          <Portal>
            <Combobox.Positioner>
              <Combobox.Content>
                <Combobox.ItemGroup>
                  <Combobox.ItemGroupLabel>Users</Combobox.ItemGroupLabel>
                  {collection.items.length === 0 ? (
                    <Combobox.Empty>No users found</Combobox.Empty>
                  ) : (
                    collection.items.map((user) => (
                      <Combobox.Item key={user.id} item={user.value}>
                        {user.value}
                        <Combobox.ItemIndicator />
                      </Combobox.Item>
                    ))
                  )}
                </Combobox.ItemGroup>
              </Combobox.Content>
            </Combobox.Positioner>
          </Portal>
        </Combobox.Root>
      </Box>
    );
  }
  


//tasklist.tsx completion Badge
<Table.Cell>
              <Badge colorPalette={getStatusColor(task.completion_status)}>
                {task.completion_status}
              </Badge>
            </Table.Cell>


Old
  <Select.Root
                collection={completion_optons}
                defaultValue={[task.completion_status]}
                onValueChange={(e) => handleStatusChange(task.id, e.value[0])}
                size="sm"
                width="200px"
              >
                <Select.HiddenSelect />
                <Select.Label>Status</Select.Label>
                <Select.Control>
                  <Select.Trigger>
                  <Flex align="center" gap={2} px={2}>
                    <Box
                      w="10px"
                      h="10px"
                      borderRadius="full"
                      bg={getStatusColor(task.completion_status)}
                    />
                    <Text>{task.completion_status}</Text>
                  </Flex>
                  </Select.Trigger>
                  <Select.Indicator /> 
                </Select.Control>
                <Portal>
                  <Select.Positioner>
                    <Select.Content>
                      {completion_optons.items.map((item) => (
                        <Select.Item item={item} key={item.value}>
                          <Badge colorPalette={getStatusColor(item.value)}>
                            {item.label}
                            </Badge>
                          <Select.ItemIndicator />
                        </Select.Item>
                      ))}
                    </Select.Content>
                  </Select.Positioner>
                </Portal>
              </Select.Root>


//App.tsx


import { useEffect, useState } from "react";
import { fetchAuthSession } from "aws-amplify/auth";
import { Authenticator } from "@aws-amplify/ui-react";
import "@aws-amplify/ui-react/styles.css";
// import CreateTaskForm from "./components/CreateTaskForm";
import TaskList from "./TaskList";
import { Button, Box, Text, Flex } from "@chakra-ui/react"

function App() {
  const [displayName, setDisplayName] = useState("");
  const [refreshFlag, setRefreshFlag] = useState(0);
  const handleTaskCreated = () => {
    setRefreshFlag(prev => prev + 1);
  };

  useEffect(() => {
    const fetchUser = async () => {
      const session = await fetchAuthSession();
      const token = session.tokens?.idToken?.toString();

      const res = await fetch(
        "https://uctzoa3zi9.execute-api.eu-central-1.amazonaws.com/Prod/me",
        {
          headers: {
            Authorization: token!,
          },
        }
      );

      const data = await res.json();
      setDisplayName(data.username || data.nickname || "User");
    };

    fetchUser();
  }, []);

  return (
    <Authenticator>
      {({ signOut }) => (
        <Box minH="100vh">
          {/* Top Navbar */}
          <Flex
            as="header"
            boxShadow="sm"
            px={6}
            py={4}
            align="center"
            justify="space-between"
          >
            <Text fontSize="lg" fontWeight="bold">
              Hello, {displayName}
            </Text>
            <Button colorScheme="red" onClick={signOut}>
              Sign Out
            </Button>
          </Flex>

          {/* Main Content */}
          <Box mx="auto" p={6}>
            <TaskList
              refresh={refreshFlag}
              onTaskCreated={handleTaskCreated}
              displayName={displayName}
            />
          </Box>
        </Box>
      )}
</Authenticator>
  );
}

export default App;

//TaskList.tsx
            <Table.Cell width={"35%"}>
            {usersLoading ? (
                <Spinner size="sm" color="gray.500" />
              ) : task.assignedTo.length > 0 ? (
                task.assignedTo.map((userId) => (
                  <Text key={userId} fontSize="sm" color="gray.600">
                    {users.find((user) => user.user_id === userId)?.username || "Unknown User"}
                  </Text>
                ))
              ) : (
                <Text fontSize="sm" color="gray.500">Unassigned</Text>
              )}
            </Table.Cell>


