AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  task-manager-backend

  Sample SAM Template for task-manager-backend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:
  GetTasksFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: get_tasks/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
      - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Tasks
      Events:
        GetTasksApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /tasks
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
  AddTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: add_tasks/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Tasks
      Events:
        AddTasksApi:
          Type: Api
          Properties:
            Path: /tasks
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
  
  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_tasks/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Tasks
      Events:
        UpdateTasksApi:
          Type: Api
          Properties:
            Path: /tasks/{id}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_tasks/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Tasks
      Events:
        DeleteTasksApi:
          Type: Api
          Properties:
            Path: /tasks/{id}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer

  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: post_confirmation_user_add/
      Handler: app.lambda_handler
      Runtime: python3.13
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_users/
      Handler: app.lambda_handler
      Runtime: python3.13
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        GetUserApi:
          Type: Api
          Properties:
            Path: /users
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
  
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tasks
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
  
  FetchUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: fetch_user/
      Handler: app.lambda_handler
      Runtime: python3.13
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        FetchUserApi:
          Type: Api
          Properties:
            Path: /me
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TaskManagerUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmationFunction.Arn

  PostConfirmationInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PostConfirmationFunction
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: NewTaskManager
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Globals:
  Api:
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: arn:aws:cognito-idp:eu-central-1:665207553327:userpool/eu-central-1_E9VsySILE
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GetTasksApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tasks/"
  GetTasksFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt GetTasksFunction.Arn
  GetTasksFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt GetTasksFunctionRole.Arn
